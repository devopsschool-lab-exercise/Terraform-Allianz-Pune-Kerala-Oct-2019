
My Name - Rajesh Kumar
3 Days - AWS
2 Days - Azure
==========================
DevOps - CI - CD - Cloud - Container
=================================
Office Hour - 9.30 - 6.30
========================
Lunch Hour - 1 - 2 PM
Tea break -
============================
Demo - AWS + Azure
Lab - AWS + Azure
=============================
---
Ansible
Jenkins
===================================
What is terraform?
----------------------
        Coding for Infra...
        Infra as a Code?
        PROVIDERS ===== AKA TOOLS
            HARSHICORP
            COMMUNITY
        by HARSHICORP
            Vagrant
            Packer
            Consul
            terraform
        Written in Go
        Version
            Community - CMD
            Enterprise - CMD + GUI


Lets understand what we have in infra?
======================================
SDLC
-------
Prj - AllianZX
Mgr - MgrX
------------------------
Under a DevOps Influence
------------------------
    1. Immediate release - Every Commit should be eligible prod
    2. Quality Redefined
    3. Cost Reduction

https://www.youtube.com/watch?v=-VaVmb_UOC8 - 8 HOURS

------------------------
1 WEEK ----------> 1 Hour
==========================
1. monolitic - microservices
2. Team culture and mindset
3. Right object
4. Automation
==========================
Planning - Architect - Visio, jira, Confluence - 10 microservices
Dev - 10 
        Code Integ ---> Github
        Code Review -
            Peer Code Review - Github, Gerrit, CodeCollab
            Static Code Review - SonarQube, Foritfy,
        Build mgmt - Maven, Gradle, Ant, MSBuild, 
        Unit Testing -  Junit, JNunit, Rspec
        Packaging team -
            SYSTEM - EXE, MSI, DMG, RPM, DEB, APK
            APP - zip, tar, war, ear, jar, dll
        Archiving - Nexus, Artifacotry, Archiva, Nuget,
        ENV
                Dev
                Staging
                UAT
                PROD
AllianZX11.1- 10.30 AM
===================================
Staging - 200 SERVER

1 Deployment - 9 mins?
200 Dep ------ 9 mins?
    ----------------------
        HOW? Parrel......
        100 W 100 LINUX
        100 APAHE 100 NG
        50 TOM 50 JOBS 50 WL 50 WS
        50 MYSQL 50 MS 50 OR 50 PS
        100 DIFF
    ----------------------
    Ansible, Puppet, Chef, UDeploy, Octopus Deployment
Overall Deployment time - 10 mINS.....
---------------------------------
How to get 200 machine in 1 mins? -------
        AWS, Azure
==========================================
200 Dep --> 1 SECOND
Container - Docker ---> Kubernetes

    AT
            SELENIUM + HP + FOrify + QTP

    Code Coverage/ Test Coverage - Jacoco, Cobertura

=======================================================================
What is Jenkins?
---------------------------------
CI TOOL
Cont Integ.
Auto Build -> Auto testing -> Auto feedback
Plan->Code->Review->BUikd->UT->Pack->Archivin->Dep2QA-AT-CC-release
Jira->git->Sonar-Juunit-Mave->>Jar->Artifav->Ansibel->Sel->jacoo-->
====================================================================
                                JENKINS
AWS
Azure
Docker
Kuber
-------------------------
1 PERSON WHO CAN CODE FOR PROD
1 PERSON WHO CAN CODE FOR TESTING A PROD
1 PERSON WHO CAN CODE for INFRA-OPS for ENTIRE TEAM
        - INFRA ON AWS
    
==================================================
https://www.devopsschool.com/path/

==================================================
Ansible  Vs terraform
--------------------
Server mgtm 
Config 
Ansible does understand each infra tools-their properties


Code for infra --- in infra you have so many tools.
    Does it.
====================================================================
USE CASES
=============================
Github
    AWS
        Setting up --- Ansible
    Do something for Build - PAck - UR - AT - CC
    Deploy to 
            Dev
                VPC
                SUBNET
                ROUTE
                IGW
                Secuirt
                EC2insta -----> Ansible --> AT
                RDS
                ASG
                ROUTE 53
                SQS
                SNS
                SES
            QA
                      Dev
                VPC
                SUBNET
                ROUTE
                IGW
                Secuirt
                EC2insta
                RDS -- mYSQL
                ASG
                ROUTE 53
                SQS
                SNS
                SES
            PROD
                      Dev
                VPC
                SUBNET
                ROUTE
                IGW
                Secuirt
                EC2insta
                RDS
                ASG
                ROUTE 53
                SQS
                SNS
                SES

AWS
Azure
GC
Jira
Github
Maven
MYSQL
===================================================
CREATE  -----> UPDATE  ---> DESTROY 
------------1 COMMAND ----------------------------
TERRAFORM
==================================================
TERRAFORM Architecute

Humen --> Terraform -> Providers --> API --> TOOL
SPL(20) ------------------------- ----------

CREATE  ---- UPDATE  --- DELETE

---terraform    


==============================
IF YOU WANT TO AUTOMATE -
        YOU NEED TO KNOW Providers and Their FEARURES...
        ----------------------
        AWS
            IAM
            EC2
            EBS
            S3
            ASG
            VPC
            SUBNET
            SECURITY
            KEYS

---------------------------Format ---------------------------
PROVIDER (AWS)
            (Resources)
                    Properties(Argument)
                    Provisionars

PROVIDERS
https://www.terraform.io/docs/providers/index.html

            EC2
            EBS
            S3
            ASG
            VPC
            SUBNET
            SECURITY
            KEYS

How to install Terraform?
==============================
    2  wget https://releases.hashicorp.com/terraform/0.12.12/terraform_0.12.12_linux_amd64.zip
    3  yum install wget -y
    4  sudo yum install wget -y
    5  clear
    6  cd
    7  ls
    8  wget https://releases.hashicorp.com/terraform/0.12.12/terraform_0.12.12_linux_amd64.zip
    9  clear
   10  ls
   11  unzip terraform_0.12.12_linux_amd64.zip
   12  sudo yum install unzip
   13  clear
   14  unzip terraform_0.12.12_linux_amd64.zip
   15  clear
   16  ls
   17  echo $PATH
   18  chmod 755 terraform
   19  mv terraform /usr/local/bin
   20  sudo mv terraform /usr/local/bin
   21  clear
   22  s
   23  terraform


Repo Name - Terraform-Allianz-Pune-Kerala-Oct-2019
supernotes.txt
Rajesh
    myfile


http://bit.ly/2pacTOR


Darshankolambkar
kadankote
RijuJ
manuprasadr
Aravindn01
safeerkbasheer
rahulgk88
gsbabu

yedu-ms

Johnwick5252
Mohdshoaibansari
Monaindap@gmail.com OR mrunmayeeindap

rakeysh.radhakrishna@gmail.com
rakesh881ans

Chandrahas93
junaidansari007
Shinzantony
rakeshr2r


shajinairs
smathew11
 
 Workflow to working with terraform?
========================================
Step - 1 - Install terraform        DONE

Step - 2 - Decide a PROVIDERS       DONE
            AWS
            Github

Step - 3 - DECIDE a Resources        DONE
            ec2 instance

Step - 4 - Initialize terraform         DONE
                - Create a terraform script
                    - Downloading a PROVIDER

        WHat is the ext of file in which you want to store HCl?
        - .tf
        What should be file name?
        - Any thing

            - First Declate in .tf
            - Second $ terraform init

provider "aws" {
  region     = "ap-south-1"
  access_key = ""
  secret_key = ""
}

Step - 5 - Declare resources and Arguments      DONE
        - In terraform script - 
                    EC2 -
                            argruments


resource "aws_instance" "web" {
  ami           = "ami-5b673c34"
  instance_type = "t2.micro"
}


CREATE -----> UPDATE  ---> DESTROY

Step - 6 - PLAN (DRY RUN)
            terraform plan

Step - 7 - APPLY (Create a Resoureces)
            terraform apply

Step - 8 - APPLY  (Update a Resoureces)
            terraform plan
            terraform apply

Step - 9 - DESTROY  (DELETE a Resoureces)
            terraform destroy


ACCESS MACHNISM IN AWS
==============================
HUMEN TO API TO AWS         -- POLICY - GROUP - USER
AWS SERVICE TO AWS SERVICE  -- POLICY - ROLES
-----------------------------
        IAM

==============================DAY 2==========================
RECAP
==================
WHAT IS TERRAFORM?
WHY WE NEED TERRAFORM?
    DEVOPS - CI - CD - DEVSECOPS

HOW TO INSTALL TERRAFORM?
WHAT IS .tf
WHAT IS HSL
What is PROVIDERS?
WHat is Resources?
WHAT IS ATTRIBUTES?
------COMMANDS-----------
terraform plan
terraform apply
terraform destroy
=================================

What is statefile?
=====================
It is a file which records all the changes done in your infra through .tf file and used for
        CREATE
        UPDATE
        DELETE
It is a JSON
You MUST NOT TOUCH THIS FILE.
This file can be
        LOCAL
        REMOTE
Name of the resources MUST BE unique to the Provier...NOT ACROSS a PROVIDER



Working with another PROVIDERS  
        Github
        Jenkins 
        Ansible
What is Provisionar?
Types of Provisionar
How to use Provisionar?
===================================
GATHER
    EC2 instance
        Execute Ansible
            Some software Installation
            Adding users and group


PROVIDERS
    RESOURCES
        ATTITRIBUTES
=================================================
DESIRE -->  JSON STATEFILE ---> INFRA 
            ACTUAL
.TF 


CHANGE DONE IN - MANUALLY?
        ---> NOT MATCHING WITH STATE FILE === INFRA
                    --- DESTROY A RESOURCES - RECREATE It
                    --- IMPORT FROM INFRA  TO STATE FILE ---
                                ---- CHNAGS

=============================================================================
PROVIDERS
    RESOURCES
        ATTITRIBUTES
        Provisionar
---------------------------
What is Provisionar?
https://www.terraform.io/docs/provisioners/index.html
    ANY THING WHICH YOU WANT TO DO 

            PRIOR TO BE CREATED RESOURCES
            WITH CREATED RESOURCES
            POST CREATED RESOURCES

TYPES OF Provisionar?
    local-exec Provisioner
    The local-exec provisioner invokes a local executable after a resource is created. 
            https://www.terraform.io/docs/provisioners/local-exec.html

provisioner "local-exec" {
    command = "echo "Welcome to Terraform Allianz Class" >> /Users/rajeshkumar/terraform/local-exec.txt"
  }

provisioner "local-exec" {
    command = "/bin/bash deploy.sh"
  }

provisioner "local-exec" {
    command = "open WFH, '>completed.txt' and print WFH scalar localtime"
    interpreter = ["perl", "-e"]
  }



    
    file Provisioner
    The file provisioner is used to copy files or directories from the machine executing Terraform to the newly created resource. 
            https://www.terraform.io/docs/provisioners/file.html
    
    remote-exec Provisioner
    The remote-exec provisioner invokes a script on a remote resource after it is created.
            https://www.terraform.io/docs/provisioners/remote-exec.html

    chef Provisioner
    habitat Provisioner
    puppet Provisioner
    salt-masterless Provisioner

================================================


Terraform -- EC2 Instannce
                How Do you access this Ec2-instance?
                -------------------------------
                ssh-key
PRIVATE KEYS                PUBLIC KEYS
YOU                         EC2 Instance
=============================================
How to create EC2 Keys and assign to Ec2 Instance?
1. AWS Would create a pub/pvt....PVT would be given to users. PUBLIC key would copied to Ec2-Instance

2. Import public key to AWS and Use same key for Ec2-Instance. You already have a PRIVATE

WINDOWS ------
Git bash
https://git-scm.com/

Command to create public/pvt key 
$ ssh-keygen


MINE - 
    /Users/rajeshkumar/.ssh/id_rsa.pub
    /Users/rajeshkumar/.ssh/id_rsa


resource "aws_key_pair" "deployer" {
  key_name   = "rajesh-allianz"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9Cb4SIaQmq+0CGRGiOD8z5ILYQ93wFZJIROhGv8ZQYmUzOk4zjbcEgq+gqZbKDe0VmY8LbBtRG3U+NXaRVDbsk2pQCvUworXiR6tGj3Cx450w0o6R1vsvDfmqV1ggVBmRh+4FxWnrSSonF7tXCKCIBa5keCNGqxP2/CSbfFlzMY31DPCgscbPT7aR20KA3Wi50Nfonib2djagI56bW9juiXODXROnleABXq5iHgaSRkU6VpdihRSJXOPPUHB2aHlfgZ3A+YvqJPcENH4CIsugX1HyXuB1OAIm1df0FkPZ4G4n0zUryZySFCGnemGD1FSpo2W54F/snYNcfoQFJ0sb rajeshkumar@Rajeshs-MacBook-Pro.local"
}


key_name = "rajesh-allianz"


    file Provisioner
    The file provisioner is used to copy files or directories from the machine executing Terraform to the newly created resource. 
            https://www.terraform.io/docs/provisioners/file.html

CONNECTION  - AKA - access
ec2-user
/Users/rajeshkumar/.ssh/id_rsa

    
    remote-exec Provisioner
    The remote-exec provisioner invokes a script on a remote resource after it is created.
            https://www.terraform.io/docs/provisioners/remote-exec.html


provisioner "file" {
  source      = "index.html"
  destination = "/tmp/index.html"

}

provisioner "file" {
  source      = "index.html"
  destination = "/tmp/index.html"

  connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = "/Users/rajeshkumar/.ssh/id_rsa"
  }
}

==============================================================
What is Ansible?
-----------------------
    Config mgmt tool.

Step 1 - Install Ansible 
Step 2 - Copy playbook.yaml to ec2 instance
Step 3 - Execute playbook
$ ansible-playbook localhost playbook.yaml


  provisioner "remote-exec" {
    inline = [
      "sudo yum install wget -y",
      "wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm",
      "sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm",
      "sudo rpm -i epel-release-latest-7.noarch.rpm",
      "sudo yum install ansible -y",
      "sudo yum install git -y",
      "git clone https://github.com/devops-school/ansible-hello-world-role /tmp/ans_ws",
      "ansible-playbook /tmp/ans_ws/site.yaml"
    ]
  }


$ sudo yum install wget -y
$ wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
$ yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
$ sudo rpm -i epel-release-latest-7.noarch.rpm
$ sudo yum update -y 
$ sudo yum install ansible -y


Created a Key Pair
Created a EC2-instance
    keypair
    local
    file
    remote

==============
How to use PROVIDERS?
    HOW TO USE RESOURCES?
        HOW TO ATTRIBUTES?
            HOW TO Provisionars

Variables
Meta info of resources
backend
Modules
=============
RECAP
    What is terraform?
    Why Terraform?
    Installing terraform?
    Terraform Architecture
    How to work with terraform
    Providers
        Resources
            ATTRIBUTES
            Provisionar
==========================
Variables in terraform
==========================
What is Variable?
Variable is having some key:value in multiple format.

Why do we need it?
    To avoid HARD CODING your terraform config file.
    Parameterize

What is the kind of variable in Terraform?
    AKA variable TYPES
---------- Introduced at very early stage--------------
1. string
2. number
3. bool

4. list
5. set
6. map
7. object
8. Touple

Where to declare a variable in Terraform?
1. .tf
2 .tfvars
3. Command LINE using -var
    - CALL a varible file
    - key:value
4. ENV variable.
    TF_VAR_


How to declare a variable in Terraform?
Method 1 - declaring a variable in Terraform config file(.tf).

variable "image_id" {
  type = string
  description = "This is for demo of string variable"
  default = "ami-5b673c34"
}

variable "count" {
  type = number
  description = "This is for demo of number variable"
  default = 2
}

variable "validate" {
  type = bool
  description = "This is for demo of bool variable"
  default = true
}



How to use it?
---------------------------
How to use string TYPE varaible in Teraform?

variable "reponame" {
  type = string
  description = "This is for demo of string variable"
  default = "day3-allianz"
}

variable "count" {
  type = number
  description = "This is for demo of number variable"
  default = 2
}

variable "validate" {
  type = bool
  description = "This is for demo of bool variable"
  default = true
}

resource "github_repository" "web" {
  name        = "${reponame}"
  description = "My awesome codebase"
  private = false
}

============number with LOOPING =====================

variable "numofusers" {
  type = number
  description = "This is for demo of number variable"
  default = 3
}

resource "aws_iam_user" "example" {
  count = "${var.numofusers}"
  name  = "rajesh.${count.index}"
}


What is the Precendence or order of loading?


URL - https://www.terraform.io/docs/configuration/variables.html

=========================================

How do you manage changes?
Existing infra without terraform 
1. import a providers resources into a teraform state file.


Existing infra with terraform
----------------------------
10 Providers
    100 Resources
    ADD - Add a resources spec
    Modify - 
    Resources Attributes OR Resources Provisionar
    -- RECREATED         OR null resources

    ConfigItem of VMs ----- 
            Ansible
            Chef
            Puppet
================================
MAP
================================





variable "AWS_REGION" {
  default = "eu-west-1"
}

variable "AMIS" {
  type = map(string)
  default = {
    us-east-1 = "ami-13be557e"
    us-west-2 = "ami-06b94666"
    ap-south-1 = "ami-5b673c34"
  }
}

resource "aws_instance" "example" {
  #ami           = var.AMIS[var.AWS_REGION]
  ami           = "${lookup(var.AMIS, var.AWS_REGION)}"
  instance_type = "t2.micro"  
}

==============================
Terraform variable using EXTERNAL files
===================================
Any file BUT MUST BE with .tfvars
        IF file name is terraform.tfvars, its automatically detected.
        If file name is other than terraform.tfvars, you must  pass it through commandline

==============================
Terraform variable using Command LINE
===================================
terraform apply -var-file="testing.tfvars"
OR
terraform apply -var="image_id=ami-abc123"

==============================
Terraform variable using ENV
===================================
export TF_VAR_instancetype = t2.micro


PROJECTS
ALL VARS MUST GO TO vars.tf
ALL VALUES MUST GO TO terraform.tfvars
RENAME terraform.tfvars to myvalues.tfvars and use command LINE
RENAME myvalues.tfvars to myvalues.tfvars.bkp  and use ENV Vars
=================================
Packer
===============================

variable "instancetype" {}




        


        



































